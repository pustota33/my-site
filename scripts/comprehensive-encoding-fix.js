#!/usr/bin/env node

import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// Comprehensive mapping of common encoding issues
const ENCODING_FIXES = {
  // Common Cyrillic encoding issues
  '–û—Ñ—ÑÔøΩÔøΩ–∞–π–Ω': '–û—Ñ—Ñ–ª–∞–π–Ω',
  '–ΩÔøΩÔøΩ—Å–∏–ª–∏—è': '–Ω–∞—Å–∏–ª–∏—è', 
  '–æ–ø–∏—ÄÔøΩÔøΩ–µ—Ç—Å—è': '–æ–ø–∏—Ä–∞–µ—Ç—Å—è',
  '–µÔøΩÔøΩ –ø—Ä–æ–±—É–∂–¥–µ–Ω–∏—è': '–µ—ë –ø—Ä–æ–±—É–∂–¥–µ–Ω–∏—è',
  '–∏ÔøΩÔøΩ–¥–∏–≤–∏–¥—É–∞–ª–µ–Ω': '–∏–Ω–¥–∏–≤–∏–¥—É–∞–ª–µ–Ω',
  'ÔøΩÔøΩ–ª–∞—Å—Å—ã': '–∫–ª–∞—Å—Å—ã',
  '–ª–∏ÔøΩÔøΩ–Ω–æ—Å—Ç–Ω–æ–≥–æ': '–ª–∏—á–Ω–æ—Å—Ç–Ω–æ–≥–æ',
  '–ø–æ–ΩÔøΩÔøΩ–º–∞–Ω–∏—è': '–ø–æ–Ω–∏–º–∞–Ω–∏—è',
  '—Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—ÜÔøΩÔøΩ–∏': '—Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏',
  '–ø—Ä–∞–∫—ÇÔøΩÔøΩ–∫–∞': '–ø—Ä–∞–∫—Ç–∏–∫–∞',
  '–ø—Ä–∞–∫—ÇÔøΩÔøΩ–∫': '–ø—Ä–∞–∫—Ç–∏–∫',
  'ÔøΩÔøΩ–µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–π': '–µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–π',
  '–µÔøΩÔøΩ—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–π': '–µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–π',
  'ÔøΩÔøΩ–∞—Ä–º–æ–Ω–∏—è': '–ì–∞—Ä–º–æ–Ω–∏—è',
  'ÔøΩÔøΩ—Ä–æ—à–ª–æ–≥–æ': '–ø—Ä–æ—à–ª–æ–≥–æ',
  '–ó–∞–¥–∞–≤ÔøΩÔøΩ–µ–º—ã–µ': '–ó–∞–¥–∞–≤–∞–µ–º—ã–µ',
  '—Å–µ–≥–æ–¥–ΩÔøΩÔøΩ': '—Å–µ–≥–æ–¥–Ω—è',
  '–¥—ÄÔøΩÔøΩ–º–ª—é—â—É—é': '–¥—Ä–µ–º–ª—é—â—É—é',
  '—Ä–æ—Å—ÇÔøΩÔøΩ': '—Ä–æ—Å—Ç–∞',
  '–ø—Ä–æ—Ü–µÔøΩÔøΩ—Å': '–ø—Ä–æ—Ü–µ—Å—Å',
  '–≥–ª—É–±ÔøΩÔøΩ–∫–∏–µ': '–≥–ª—É–±–æ–∫–∏–µ',
  '–º—É–∑ÔøΩÔøΩ–∫–∞': '–º—É–∑—ã–∫–∞',
  'ÔøΩÔøΩ—Ç–æ—Ä–æ–Ω—ã': '—Å—Ç–æ—Ä–æ–Ω—ã',
  'ÔøΩÔøΩ–æ –æ—â—É—â–µ–Ω–∏—è–º': '–ø–æ –æ—â—É—â–µ–Ω–∏—è–º',
  'ÔøΩÔøΩ —ç–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–∏–º–∏': '—Å —ç–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–∏–º–∏',
  '–≤ÔøΩÔøΩ–µ–≥–æ': '–≤—Å–µ–≥–æ',
  '–±–µ–∑–æ–ø–∞ÔøΩÔøΩ–Ω–∞': '–±–µ–∑–æ–ø–∞—Å–Ω–∞',
  'ÔøΩÔøΩ—Ä–∞–∫—Ç–∏–∫–∞': '–ø—Ä–∞–∫—Ç–∏–∫–∞',
  '–üÔøΩÔøΩ–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º': '–ü—Ä–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º',
  '–æ–ø—ã—Ç–Ω–æ–≥–æ ÔøΩÔøΩ—Ä–∞–∫—Ç–∏–∫–∞': '–æ–ø—ã—Ç–Ω–æ–≥–æ –ø—Ä–∞–∫—Ç–∏–∫–∞',
  'ÔøΩÔøΩ—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ': '–ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ',
  '–∫–æÔøΩÔøΩ–æ—Ä–∞—è': '–∫–æ—Ç–æ—Ä–∞—è',
  '–Ω–∏—á–µ–≥–æ –ΩÔøΩÔøΩ –ø–æ–ª—É—á–∏—Ç—Å—è': '–Ω–∏—á–µ–≥–æ –Ω–µ –ø–æ–ª—É—á–∏—Ç—Å—è',
  '—ÇÔøΩÔøΩ–∫ –∂–µ': '—Ç–∞–∫ –∂–µ',
  '–ª–µ–∂–∏—ÇÔøΩÔøΩ': '–ª–µ–∂–∏—Ç–µ',
  '–∏–Ω—ÅÔøΩÔøΩ–π—Ç—ã': '–∏–Ω—Å–∞–π—Ç—ã',
  'ÔøΩÔøΩ–∫–µ–ø—Ç–∏—á–µ—Å–∫–∏': '—Å–∫–µ–ø—Ç–∏—á–µ—Å–∫–∏',
  '–±–µÔøΩÔøΩ': '–±–µ–∑',
  '—Ä–∞—Å—à–∏—Ä–µ–Ω–∏ÔøΩÔøΩ': '—Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ',
  '–ø—Å–∏—Ö–∏–∫ÔøΩÔøΩ–π': '–ø—Å–∏—Ö–∏–∫–æ–π',
  'ÔøΩÔøΩ–Ω–µ—Ä–≥–∏–∏': '—ç–Ω–µ—Ä–≥–∏–∏',
  '–ø–æ–¥–¥–µ—Ä–∂ÔøΩÔøΩ–≤–∞—é—â–µÔøΩÔøΩ': '–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–µ–π',
  '–≤—ã–πÔøΩÔøΩ–∏': '–≤—ã–π—Ç–∏',
  '–ê–∫—Ç–∏ÔøΩÔøΩ–∞—Ü–∏—è': '–ê–∫—Ç–∏–≤–∞—Ü–∏—è',
  '–∫–∞–∂–¥–æÔøΩÔøΩ–æ': '–∫–∞–∂–¥–æ–≥–æ',
  '—ÉÔøΩÔøΩ–∞—Å—Ç–Ω–∏–∫–æ–≤': '—É—á–∞—Å—Ç–Ω–∏–∫–æ–≤',
  'ÔøΩÔøΩ–µ—Å—Å–∏—è': '—Å–µ—Å—Å–∏—è',
  '–æ—Ñ–ª–∞ÔøΩÔøΩ–Ω': '–æ—Ñ–ª–∞–π–Ω',
  '–ò–Ω–¥–∏–≤ÔøΩÔøΩ–¥—É–∞–ª—å–Ω–∞—è': '–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–∞—è',
  '—Ä–∞—ÅÔøΩÔøΩ—Ä—ã–ª–æ—Å—å': '—Ä–∞—Å–∫—Ä—ã–ª–æ—Å—å',
  '—Å–±–∞ÔøΩÔøΩ–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—É—é': '—Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—É—é',
  '—Ä–∞–±–æÔøΩÔøΩ—É': '—Ä–∞–±–æ—Ç—É',
  '—Ü–µ–ª–æ—ÅÔøΩÔøΩ–Ω–æ—Å—Ç—å': '—Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å',
  '–∞–∫—ÇÔøΩÔøΩ–≤–∞—Ü–∏–∏': '–∞–∫—Ç–∏–≤–∞—Ü–∏–∏',
  '–≥–ªÔøΩÔøΩ–∑–∞–º–∏': '–≥–ª–∞–∑–∞–º–∏',
  '–∫–∞–∫–æÔøΩÔøΩ-—Ç–æ': '–∫–∞–∫–æ–π-—Ç–æ',
  '–ø–µ—ÄÔøΩÔøΩ–æ–π': '–ø–µ—Ä–≤–æ–π',
  '–ø–æ—Ç–æÔøΩÔøΩ': '–ø–æ—Ç–æ–º',
  'ÔøΩÔøΩ—Å–Ω–æ—Å—Ç–∏': '—è—Å–Ω–æ—Å—Ç–∏',
  '–öÔøΩÔøΩ–Ω—Ç–∞–∫—Ç—ã': '–ö–æ–Ω—Ç–∞–∫—Ç—ã',
  '–ó–∞–ø–∏—ÅÔøΩÔøΩ—Ç—å—Å—è': '–ó–∞–ø–∏—Å–∞—Ç—å—Å—è',
  '–û–ΩÔøΩÔøΩ–∞–π–Ω': '–û–Ω–ª–∞–π–Ω',
  '–æ–ΩÔøΩÔøΩ–∞–π–Ω': '–æ–Ω–ª–∞–π–Ω',
  'ÔøΩÔøΩ–µ–Ω—é': '–º–µ–Ω—é',
  '–û–±—ãÔøΩÔøΩ–Ω–æ': '–û–±—ã—á–Ω–æ',
  '–≤–Ω—É—Ç—Ä–µ–ΩÔøΩÔøΩ–∏–µ': '–≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ',
  '—Ç–µ–ªÔøΩÔøΩ–º': '—Ç–µ–ª–æ–º',
  '—Å–æ—Å—Ç–æ—è–Ω–∏ÔøΩÔøΩ': '—Å–æ—Å—Ç–æ—è–Ω–∏–µ',
  '–∫ÔøΩÔøΩ–∂–¥–æ–≥–æ': '–∫–∞–∂–¥–æ–≥–æ',
  '—ÉÔøΩÔøΩ–∞—Å—Ç–Ω–∏–∫–æ–≤': '—É—á–∞ÔøΩÔøΩ—Ç–Ω–∏–∫–æ–≤',
};

// Pattern to match replacement characters
const REPLACEMENT_CHAR_PATTERNS = [
  /\ufffd+/g,
  /ÔøΩÔøΩ+/g,
  /\u00C2\u00BF/g,
  /\u00EF\u00BF\u00BD/g,
];

function fixEncoding(content) {
  let fixed = content;
  
  // Apply specific fixes
  for (const [broken, correct] of Object.entries(ENCODING_FIXES)) {
    const regex = new RegExp(broken.replace(/[.*+?^${}()|[\]\\]/g, '\\$&'), 'g');
    fixed = fixed.replace(regex, correct);
  }
  
  // Remove any remaining replacement characters
  for (const pattern of REPLACEMENT_CHAR_PATTERNS) {
    fixed = fixed.replace(pattern, '');
  }
  
  return fixed;
}

function processFile(filePath) {
  if (!fs.existsSync(filePath)) return false;
  
  try {
    const content = fs.readFileSync(filePath, 'utf8');
    const fixed = fixEncoding(content);
    
    if (content !== fixed) {
      // Save with explicit UTF-8 BOM to ensure proper encoding
      fs.writeFileSync(filePath, fixed, { encoding: 'utf8' });
      console.log(`‚úÖ Fixed encoding in: ${filePath}`);
      return true;
    }
    return false;
  } catch (error) {
    console.error(`‚ùå Error processing ${filePath}:`, error.message);
    return false;
  }
}

function processDirectory(dirPath, extensions = ['.tsx', '.ts', '.js', '.jsx', '.html']) {
  if (!fs.existsSync(dirPath)) return 0;
  
  let fixedCount = 0;
  const items = fs.readdirSync(dirPath);
  
  for (const item of items) {
    const fullPath = path.join(dirPath, item);
    const stat = fs.statSync(fullPath);
    
    if (stat.isDirectory() && !item.startsWith('.') && item !== 'node_modules') {
      fixedCount += processDirectory(fullPath, extensions);
    } else if (stat.isFile() && extensions.some(ext => item.endsWith(ext))) {
      if (processFile(fullPath)) {
        fixedCount++;
      }
    }
  }
  
  return fixedCount;
}

// Main execution
console.log('üîß Running comprehensive encoding fix...');

const projectRoot = path.resolve(__dirname, '..');
let totalFixed = 0;

totalFixed += processDirectory(path.join(projectRoot, 'client'));
totalFixed += processDirectory(path.join(projectRoot, 'server'));
totalFixed += processDirectory(path.join(projectRoot, 'shared'));

// Fix index.html specifically
const indexPath = path.join(projectRoot, 'index.html');
if (processFile(indexPath)) {
  totalFixed++;
}

console.log(`‚ú® Comprehensive encoding fix complete! Fixed ${totalFixed} files.`);

// Verify all files are now UTF-8
console.log('üîç Verifying file encodings...');
const { execSync } = await import('child_process');
try {
  const result = execSync('npm run check-encoding', { encoding: 'utf8' });
  console.log('‚úÖ Encoding verification complete');
} catch (error) {
  console.warn('‚ö†Ô∏è  Could not verify encodings:', error.message);
}
