#!/usr/bin/env node

import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

const ENCODING_PATTERNS = [
  // –ü—É—Å—Ç—ã–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è –∫–∏—Ä–∏–ª–ª–∏—Ü—ã
  /\ÔøΩ\ÔøΩ/g,
  /\ufffd\ufffd/g,
  /\ufffd/g,
];

const CYRILLIC_FIXES = {
  '–ö\ufffd\ufffd\ufffd\ufffd–¥–∞': '–ö—É–Ω–¥–∞',
  '–ø\ufffd\ufffd': '–ø–æ–Ω–∏–º–∞–Ω–∏—è',
  '–∫–∞–∂\ufffd\ufffd': '–∫–∞–∂–¥–æ–º—É',
  '–≥–∞—Ä–º–æ\ufffd\ufffd': '–≥–∞—Ä–º–æ–Ω–∏—é',
  '–ø—Ä–æ—Å—Ç—Ä–∞\ufffd\ufffd': '–ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ',
  '–†–∞—Å—à\ufffd\ufffd': '–†–∞—Å—à–∏—Ä–µ–Ω–∏–µ',
  '—Å–µ\ufffd\ufffd': '—Å–µ–±—è',
  '–ê–∫—Ç–∏–≤–∞—Ü–∏\ufffd\ufffd': '–ê–∫—Ç–∏–≤–∞—Ü–∏–∏',
  '–∏—Å—Ü–µ–ª\ufffd\ufffd': '–∏—Å—Ü–µ–ª–µ–Ω–∏—é',
  '–æ–±—Ä–µ—Å\ufffd\ufffd': '–æ–±—Ä–µ—Å—Ç–∏',
  '–£–±–µ–¥–∏—Ç\ufffd\ufffd': '–£–±–µ–¥–∏—Ç–µ—Å—å',
  '\ufffd—Ä–æ–±—É–¥–∏—Ç–µ': '–ü—Ä–æ–±—É–¥–∏—Ç–µ',
  '–æ–ø—ã\ufffd\ufffd': '–æ–ø—ã—Ç',
  '–ø–æ–¥–≥\ufffd\ufffd': '–ø–æ–¥–≥–æ—Ç–æ–≤–∫—É',
  '—Ç—Ä–∞–Ω—Å—Ñ–æ—Ä\ufffd\ufffd': '—Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏',
  '–≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–º\ufffd\ufffd': '–≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–º—É'
};

function fixEncoding(content) {
  let fixed = content;
  
  // –ü—Ä–∏–º–µ–Ω—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
  for (const [broken, correct] of Object.entries(CYRILLIC_FIXES)) {
    fixed = fixed.replace(new RegExp(broken.replace(/[.*+?^${}()|[\]\\]/g, '\\$&'), 'g'), correct);
  }
  
  // –£–±–∏—Ä–∞–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è —Å–∏–º–≤–æ–ª—ã –∑–∞–º–µ—â–µ–Ω–∏—è
  for (const pattern of ENCODING_PATTERNS) {
    fixed = fixed.replace(pattern, '');
  }
  
  return fixed;
}

function processFile(filePath) {
  if (!fs.existsSync(filePath)) return;
  
  try {
    const content = fs.readFileSync(filePath, 'utf8');
    const fixed = fixEncoding(content);
    
    if (content !== fixed) {
      fs.writeFileSync(filePath, fixed, 'utf8');
      console.log(`‚úÖ Fixed encoding in: ${filePath}`);
    }
  } catch (error) {
    console.error(`‚ùå Error processing ${filePath}:`, error.message);
  }
}

function processDirectory(dirPath, extensions = ['.tsx', '.ts', '.js', '.jsx']) {
  if (!fs.existsSync(dirPath)) return;
  
  const items = fs.readdirSync(dirPath);
  
  for (const item of items) {
    const fullPath = path.join(dirPath, item);
    const stat = fs.statSync(fullPath);
    
    if (stat.isDirectory() && !item.startsWith('.') && item !== 'node_modules') {
      processDirectory(fullPath, extensions);
    } else if (stat.isFile() && extensions.some(ext => item.endsWith(ext))) {
      processFile(fullPath);
    }
  }
}

// –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞
console.log('üîß Fixing encoding issues...');

const projectRoot = path.resolve(__dirname, '..');
processDirectory(path.join(projectRoot, 'client'));
processDirectory(path.join(projectRoot, 'server'));
processDirectory(path.join(projectRoot, 'shared'));

console.log('‚ú® Encoding fix complete!');
